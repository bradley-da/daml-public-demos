module UniqueIdsTests where

import Daml.Script
import DA.Assert ((=/=), (===))
import DA.List (head, (!!))
import DA.Time

import qualified UniqueIds

can_generate_ids : Script ()
can_generate_ids = script do
  party <- allocateParty "party"
  ids <- UniqueIds.reserveFor party "test" 3
  head ids === "test-1970-01-01-1-party"
  ids !! 1 === "test-1970-01-01-2-party"
  ids !! 2 === "test-1970-01-01-3-party"

continues_count_throughout_day : Script ()
continues_count_throughout_day = script do
  party <- allocateParty "party"
  id <- UniqueIds.reserveOneFor party "test"
  increment_time (minutes 1)
  id <- UniqueIds.reserveOneFor party "test"
  increment_time (hours 1)
  id <- UniqueIds.reserveOneFor party "test"
  id === "test-1970-01-01-3-party"

restarts_count_on_next_day : Script ()
restarts_count_on_next_day = script do
  party <- allocateParty "party"
  id <- UniqueIds.reserveOneFor party "test"
  increment_time (seconds 1)
  id <- UniqueIds.reserveOneFor party "test"
  increment_time (seconds 1)
  id <- UniqueIds.reserveOneFor party "test"

  increment_time (days 1)
  id <- UniqueIds.reserveOneFor party "test"
  increment_time (seconds 1)
  id <- UniqueIds.reserveOneFor party "test"
  id === "test-1970-01-02-2-party"

different_labels_get_different_ids : Script()
different_labels_get_different_ids = script do
  party <- allocateParty "party"
  id1 <- UniqueIds.reserveOneFor party "test1"
  id2 <- UniqueIds.reserveOneFor party "test2"
  id1 =/= id2

different_parties_create_different_ids : Script()
different_parties_create_different_ids = script do
  party1 <- allocateParty "party1"
  party2 <- allocateParty "party2"
  id1 <- UniqueIds.reserveOneFor party1 "test"
  id2 <- UniqueIds.reserveOneFor party2 "test"
  id1 =/= id2

-- test utils

increment_time : RelTime -> Script()
increment_time relTime = script do
  t <- getTime
  setTime (addRelTime t relTime)